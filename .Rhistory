a <- (strsplit(a, ""))[[1]]
a <- lapply(a, function(x) replace(x = " ", "space"))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- (strsplit(a, ""))[[1]]
a <- lapply(a, function(x) ifelse(x = " ", "space", x))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- (strsplit(a, ""))[[1]]
a <- lapply(a, function(x) ifelse(x == " ", "space", x))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- unlist((strsplit(a, ""))[[1]])
a <- lapply(a, function(x) ifelse(x == " ", "space", x))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- strsplit(a, "")
a <- lapply(a, function(x) ifelse(x == " ", "space", x))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- strsplit(a, "")
a <- lapply(a, function(x) ifelse(x == " ", "space", x))
return(a[[1]])
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- strsplit(a, "")
a <- lapply(a, function(x) ifelse(x == " ", "sp", x))
return(a[[1]])
}
listify(sentence)
?strsplit
?unlist
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- unlist(strsplit(a, ""))
a <- lapply(a, function(x) ifelse(x == " ", "sp", x))
return(a[[1]])
}
?unlist
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- unlist(strsplit(a, ""))
a <- lapply(a, function(x) ifelse(x == " ", "sp", x))
return(a)
}
listify(sentence)
listify <- function(x) {
# input: a string
# output: a list
a <- x %>%
str_replace_all("[^[:alpha:] ']", "") %>%
str_replace_all("\\s+", " ")
a <- strsplit(a, "")
a <- lapply(a, function(x) ifelse(x == " ", "sp", x))
return(a)
}
listify(sentence)
key_codes <- c(97:122, 32)
names(key_codes) <- c(letters, "sp")
key_codes
new
new[1]
new[names(key_codes)]
match(new, names(key_codes))
new <- listify(sentence)
new
match(new, names(key_codes))
new
new[1]
new[[1]]
match(new[[1]], names(key_codes))
lookup <- function(a, b) {
input <- a[[1]]
dict <- names(b)
key_list <- match(input, dict)
return(key_list)
}
lookup(listify(sentence), key_codes)
dat <- lookup(listify(sentence), key_codes)
typeof(dat)
class(dat)
str(dat)
str(as.list(dat))
dat
dat[1]
dat[2]
dat[3]
dat
letters[dat]
1ed3
1e3
1e4
1e10
1e5
1e6
1e2
1e4
runif(1e3)
?runif
shiny::runApp()
xs <- runif(1e3)
xs
res <- numeric(length(xs))
res
?numeric
?character
res <- character(length(xs))
res
listify(sentence)
txt <- character(length(listify(sentence)))
txt
listify(sentence)
length(listify(sentence))
length(listify(sentence)[[1]])
res <- numeric(length(xs))
res
for (i in seq_along(xs)) {res[i] <- sqrt(xs[i])}
res
trims <- c(0, 0.1, 0.2, 0.5)
trims
x <- rcauchy(100)
x
?rauchy
rcauchy
?rcauchy
lapply(trims, function(trim) mean(x, trim = trim))
lapply(trims, mean, x = x)
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
forumals
formulas
formulas[1]
str(formulas)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
length(txt)
txt <- length(listify(sentence)[[1]])
length(Txt)
length(txt)
length(txt[[1]])
sentence <- "underneath123 the blue cushion. in the living room is a handful of 5767198498 change and        the remote control?"
txt <- length(listify(sentence)[[1]])
lenght(txt)
length(txt)
txt
?xtable
txt
txt <- (listify(sentence)[[1]])
txt
xtable(txt)
table(txt)
install.packages("xtable")
install.packages("xtable")
library(xtable)
table(txt)
xtable(txt)
xtable(as.list(txt))
txt
as.matrix(txt)
xtable(as.matrix(txt))
txt
?as.matrix
matrix(txt, nrow = 10, ncol = 10)
matrix(txt, nrow = 10, ncol = 10, byrow = TRUE)
dim(txt)
txt
matrix(txt)
dim(matrix(txt))
matrix(txt, ncol = 10, nrow = 9, byrow = TRUE)
xtable(matrix(txt, ncol = 10, nrow = 9, byrow = TRUE))
rep(1, 100)
rep("-", 100)
test <- rep("-", 100)
test
matrix(test, ncol = 10, nrow = 10)
mat <- matrix(test, ncol = 10, nrow = 10)
mat
mat[50]
mat[100]
shiny::runApp()
?format.data.frame
format.df(mat)
install.packages("format.df")
format(mat)
shiny::runApp()
datatable(head(mtcars), rownames = F)
install.packages('DT')
library(DT)
datatable(head(mtcars), rownames = F)
datatable(head(mtcars), rownames = F, colnames = F)
datatable(head(mtcars), rownames = F, colnames = F)
datatable(head(mtcars), rownames = F, colnames = FALSE)
datatable(head(mtcars), rownames = FALSE, colnames = FALSE)
test
mat
write.table(format(mat, justify="right"), row.names = F, col.names = F, quote = F)
shiny::runApp()
?write.table
write.table(txt)
?format
write.table(format(mat, justify="center"), row.names = F, col.names = F, quote = F)
write.table(format(mat, justify="centre"), row.names = F, col.names = F, quote = F)
shiny::runApp()
write.table(format(mat, justify="centre", width = 20), row.names = F, col.names = F, quote = F)
shiny::runApp()
shiny::runApp()
shiny::runApp()
write.table(format(mat, justify="centre", width = 20), row.names = F, col.names = F, quote = F)
print.data.frame(txt)
txt
print.data.frame(as.data.frame(txt))
mat
print.data.frame(mat)
print.data.frame(as.data.frame(mat))
?sink
shiny::runApp()
txt <- (listify(sentence)[[1]])
text
txt
matrix(txt)
mat
matrix
matrix(txt)
mat <- matrix(txt)
mat
write.table(format(mat, justify = "centre", width = 8), row.names = F, col.names = F, quote = F)
mat <- matrix(txt, ncol = 10)
mat
counts <- with(airquality, table(
OzCategory = cut(airquality$Ozone, seq(0, 180, 20)),
Month,
TempHi = Temp > 75
))
print(counts, zero.pring = ".")
install.packages("htmlTable")
library(htmlTable)
htmlTable(mat)
mat <- htmlTable(mat)
knit_print(mat)
print(mat)
mat
shiny::runApp()
txt <- Can we estimate the information entropy of the written English language? Consider starting with one particular letter which is picked at random. Knowing this first letter, you then want to estimate the probability of getting another particular letter after that one, and the probability of getting another letter after that first and second one, and so on.
txt <- "Can we estimate the information entropy of the written English language? Consider starting with one particular letter which is picked at random. Knowing this first letter, you then want to estimate the probability of getting another particular letter after that one, and the probability of getting another letter after that first and second one, and so on."
txt
length(txt)
listify(txt)
?runif
color <- rgb(runif(1), runif(1), runif(1))
color
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cnt <- 0
cnt
cnt[2]
cnt[2] <- 5
cnt
cnt[2]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
txt <- "the theory of black swan events is a metaphor that describes a major event that comes as a surprise
and is often inappropriately rationalized after the fact with the benefit of hindsight"
quotes <- list(rep(txt, 10))
quotes
shiny::runApp()
txt <- "the theory of black swan events is a metaphor that describes a major event that comes as a surprise
and is often inappropriately rationalized after the fact with the benefit of hindsight"
quotes <- list(
rep(txt, 10)
)
shiny::runApp()
shiny::runApp()
quotes <- list(
rep("the theory of black swan events is a metaphor that describes a major event that comes as a surprise
and is often inappropriately rationalized after the fact with the benefit of hindsight", 10)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?lapply
active <- c(97:122, 32)
lapply(active, get_letter)
vapply(active, get_letter)
sapply(active, get_letter)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
get_quote()
get_quote()
get_quote()
get_quote()
get_quote()
get_quote()
typeof(get_quote())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
